"""
DP 알고리즘
- Dynamic Programming의 약자
- 그리디 알고리즘과 같이 최적화 문제를 해결하는 알고리즘
=> 입력 크기가 작은 부분 문제들을 모두 해결한 후 그 해들을 이용해 보다 큰 크기의 부분 문제들을 해결
=> 최종적으로 원래 주어진 입력의 문제를 해결
"""

"""
DP를 적용한 피보나치 수 
- 피보나치 수를 구하는 함수에 DP 적용하기 : 부분 문제의 답으로부터 본 문제의 답을 얻을 수 있는 최적 부분 구조로 이루어져 있어 DP를 적용할 수 있다

1. 문제를 부분 문제로 분할
2. 부분 문제로 나누는 일을 끝냈으면 가장 작은 부분 문제부터 해를 구한다
3. 그 결과는 테이블에 저장하고, 테이블에 저장된 부분 문제의 해를 이용하여 상위 문제의 해를 구한다
"""

# 피보나치 수를 DP에 적용한 알고리즘
def fibo2(n) : 
    f = [0,1]

    for i in range(2, n + 1) :
        f.append(f[i+1] + f[i+2])

    return f[n]

"""
DP의 구현방식

1. 재귀적 방식 -> 재귀적 구조는 내부에 시스템 호출 스택을 사용하는 overhead가 발생할 수 있다
2. 반복문 방식 -> Memoization을 재귀적 구조에 사용하는 것보다 반복적 구조로 DP를 구현하는 것이 성능 면에서 보다 효율적이다
"""